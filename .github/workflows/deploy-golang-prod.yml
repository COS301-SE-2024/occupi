name: Lint, Test, Build and Deploy Prod golang

on:
  push:
    branches: ["master"]
    paths: ["occupi-backend/**"]

  workflow_dispatch:

defaults:
  run:
    working-directory: occupi-backend

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'  # Specify the Go version you are using

    - name: Install golangci-lint
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

    - name: Run golangci-lint
      run: |
        golangci-lint run

  test:
    needs: lint
    name: Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'  # Specify the Go version you are using

    - name: Decrypt env variables
      run: |
              echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --quiet --batch --yes --decrypt --passphrase-fd 0 .env.gpg > .env
                  
    - name: Decrypt key file
      run: |
                echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --quiet --batch --yes --decrypt --passphrase-fd 0 key.pem.gpg > key.pem
  
    - name: Decrypt cert file
      run: |
                echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --quiet --batch --yes --decrypt --passphrase-fd 0 cert.pem.gpg > cert.pem

    - name: Run tests
      run: |
        go test -v -coverpkg=github.com/COS301-SE-2024/occupi/occupi-backend/pkg/utils,github.com/COS301-SE-2024/occupi/occupi-backend/pkg/handlers ./tests/... -coverprofile=coverage.out

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  build:
    needs: test
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'  # Specify the Go version you are using

    - name: Build the code
      run: |
        go build -v cmd/occupi-backend/main.go

  build-push-docker:
    needs: build
    name: Build and Push Master Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Decrypt env variables
        run: |
                echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --quiet --batch --yes --decrypt --passphrase-fd 0 .prod.env.gpg > .prod.env
                
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: occupi-backend
          file: occupi-backend/Dockerfile.prod
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/occupi-backend:latest

  deploy:
    needs: build-push-docker
    name: Deploy for Prod
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy files to VM
        uses: appleboy/scp-action@v0.1.5
        with:
              host: ${{ secrets.VM_IP }}
              username: ${{ secrets.VM_USERNAME }}
              key: ${{ secrets.VM_SSH_KEY }}
              source: "occupi-backend/docker-compose.prod.yml,occupi-backend/Dockerfile.prod"
              target: "/home/${{ secrets.VM_USERNAME }}/occupi-backend-prod"

      # SSH to VM and run commands
      - name: SSH to VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
              cd /home/${{ secrets.VM_USERNAME }}/occupi-backend-prod/occupi-backend
              echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
              DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} docker compose -f docker-compose.prod.yml down
              DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} docker compose -f docker-compose.prod.yml pull
              DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} docker compose -f docker-compose.prod.yml up -d
